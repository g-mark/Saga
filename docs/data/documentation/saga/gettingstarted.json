{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start with the most basic example: rendering all Markdown files to HTML."}]},{"type":"codeListing","syntax":"swift","code":["import Saga","import SagaParsleyMarkdownReader","import SagaSwimRenderer","import HTML","","func renderPage(context: ItemRenderingContext<EmptyMetadata, EmptyMetadata>) -> Node {","  html(lang: \"en-US\") {","    body {","      div(id: \"content\") {","        h1 { context.item.title }","        Node.raw(context.item.body)","      }","    }","  }","}","","@main","struct Run {","  static func main() async throws {","    try await Saga(input: \"content\", output: \"deploy\", siteMetadata: EmptyMetadata())","      \/\/ All Markdown files within the `input` folder will be parsed to html.","      .register(","        metadata: EmptyMetadata.self,","        readers: [.parsleyMarkdownReader()],","        writers: [","          .itemWriter(swim(renderPage))","        ]","      )","","      \/\/ Run the step we registered above","      .run()","","      \/\/ All the remaining files that were not parsed to markdown, so for example ","      \/\/ images, raw html files and css, are copied as-is to the output folder.","      .staticFiles()","  }","}"]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/robb\/Swim"},{"type":"text","text":" library via "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/loopwerk\/SagaSwimRenderer"},{"type":"text","text":" to create type-safe HTML. The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Saga\/documentation\/Saga\/Architecture"},{"type":"text","text":" document has more information on how Saga works."}]}]},{"anchor":"Custom-metadata","level":2,"type":"heading","text":"Custom metadata"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of course Saga can do much more than just render a folder of Markdown files as-is. It can also deal with custom metadata contained within Markdown files - even multiple types of metadata for different kinds of pages."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s look at an example Markdown article, "},{"type":"codeVoice","code":"\/content\/articles\/first-article.md"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"text","code":["---","tags: article, news","summary: This is the summary of the first article","date: 2020-01-01","---","# Hello world","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And an example app for a portfolio, "},{"type":"codeVoice","code":"\/content\/apps\/lastfm.md"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"text","code":["---","url: https:\/\/itunes.apple.com\/us\/app\/last-fm-scrobbler\/id1188681944?ls=1&mt=8)","images: lastfm_1.jpg, lastfm_2.jpg","---","# Last.fm Scrobbler","\"Get the official Last.fm Scrobbler App to keep track of what you're listening to on Apple Music. Check out your top artist, album and song charts from all-time to last week, and watch videos of your favourite tracks.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you can see, they both use different metadata: the article has "},{"type":"codeVoice","code":"tags"},{"type":"text","text":", a "},{"type":"codeVoice","code":"summary"},{"type":"text","text":" and a "},{"type":"codeVoice","code":"date"},{"type":"text","text":", while the app has a "},{"type":"codeVoice","code":"url"},{"type":"text","text":" and "},{"type":"codeVoice","code":"images"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s configure Saga to render these files, while also adding a "},{"type":"codeVoice","code":"SiteMetadata"},{"type":"text","text":" type that will be given to each template."}]},{"type":"codeListing","syntax":"swift","code":["struct ArticleMetadata: Metadata {","  let tags: [String]","  let summary: String?","}","","struct AppMetadata: Metadata {","  let url: URL?","  let images: [String]?","}","","\/\/ SiteMetadata is given to every rendering context.","\/\/ You can put whatever properties you want in here.","struct SiteMetadata: Metadata {","  let url: URL","  let name: String","}","","let siteMetadata = SiteMetadata(","  url: URL(string: \"http:\/\/www.example.com\")!,","  name: \"Example website\"",")","","@main","struct Run {","  static func main() async throws {","    try await Saga(input: \"content\", output: \"deploy\", siteMetadata: siteMetadata)","      \/\/ All Markdown files within the \"articles\" subfolder will be parsed to html,","      \/\/ using `ArticleMetadata` as the item's metadata type.","      .register(","        folder: \"articles\",","        metadata: ArticleMetadata.self,","        readers: [.parsleyMarkdownReader()],","        writers: [","          .itemWriter(swim(renderArticle)),","          .listWriter(swim(renderArticles), paginate: 20),","          .tagWriter(swim(renderTag), tags: \\.metadata.tags),","          .yearWriter(swim(renderYear)),","          ","          \/\/ Atom feed for all articles, and a feed per tag","          .listWriter(swim(renderFeed), output: \"feed.xml\"),","          .tagWriter(swim(renderTagFeed), output: \"tag\/[key]\/feed.xml\", tags: \\.metadata.tags),","        ]","      )","","      \/\/ All Markdown files within the \"apps\" subfolder will be parsed to html,","      \/\/ using `AppMetadata` as the item's metadata type.","      .register(","        folder: \"apps\",","        metadata: AppMetadata.self,","        readers: [.parsleyMarkdownReader()],","        writers: [.listWriter(swim(renderApps))]","      )","     ","      \/\/ All the remaining Markdown files will be parsed to html,","      \/\/ using the default `EmptyMetadata` as the item's metadata type.","      .register(","        metadata: EmptyMetadata.self,","        readers: [.parsleyMarkdownReader()],","        writers: [.itemWriter(swim(renderItem))]","      )","      ","      \/\/ Run the steps we registered above","      .run()","      ","      \/\/ All the remaining files that were not parsed to markdown, so for example images,","      \/\/ raw html files and css, are copied as-is to the output folder.","      .staticFiles()","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While that might look a bit overwhelming, it should be easy to follow what each "},{"type":"codeVoice","code":"register"},{"type":"text","text":" step does, each operating on a set of files in a subfolder and processing them in different ways."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Please check out the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/loopwerk\/Saga\/blob\/main\/Example"},{"type":"text","text":" for a more complete picture of Saga. Simply open "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":", wait for the dependencies to be downloaded, and run the project from within Xcode. Or run from the command line: "},{"type":"codeVoice","code":"swift run"},{"type":"text","text":". The example project contains articles with tags and pagination, an app portfolio, static pages, RSS feeds for all articles and per tag, statically typed HTML templates, and more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also check the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/loopwerk\/loopwerk.io"},{"type":"text","text":", which is completely built with Saga."}]},{"anchor":"Writers","level":2,"type":"heading","text":"Writers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the custom metadata example above, you can see that the articles step uses four different kinds of writers: "},{"type":"codeVoice","code":"itemWriter"},{"type":"text","text":", "},{"type":"codeVoice","code":"listWriter"},{"type":"text","text":", "},{"type":"codeVoice","code":"tagWriter"},{"type":"text","text":", and "},{"type":"codeVoice","code":"yearWriter"},{"type":"text","text":". Each writer takes a renderer function, in this case "},{"type":"codeVoice","code":"swim"},{"type":"text","text":", using a locally defined function with the HTML template. The "},{"type":"codeVoice","code":"swim"},{"type":"text","text":" function comes from the "},{"overridingTitleInlineContent":[{"type":"text","text":"SagaSwimRenderer"}],"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/loopwerk\/SagaSwimRenderer","overridingTitle":"SagaSwimRenderer"},{"type":"text","text":" library, whereas "},{"type":"codeVoice","code":"renderArticle"},{"type":"text","text":", "},{"type":"codeVoice","code":"renderArticles"},{"type":"text","text":", "},{"type":"codeVoice","code":"renderTag"},{"type":"text","text":" and the rest are locally defined in your project. They are the actual HTML templates, using a strongly typed DSL."}]},{"type":"aside","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you prefer to work with Mustache-type HTML template files, check out "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/loopwerk\/SagaStencilRenderer"},{"type":"text","text":"."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The four different writers are all used for different purposes:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"itemWriter"},{"type":"text","text":" writes a single item to a single file. For example "},{"type":"codeVoice","code":"content\/articles\/my-article.md"},{"type":"text","text":" will be written to "},{"type":"codeVoice","code":"deploy\/articles\/my-article.html"},{"type":"text","text":", or "},{"type":"codeVoice","code":"content\/index.md"},{"type":"text","text":" to "},{"type":"codeVoice","code":"deploy\/index.html"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"listWriter"},{"type":"text","text":" writes an array of items to multiple files. For example to create an "},{"type":"codeVoice","code":"deploy\/articles\/index.html"},{"type":"text","text":" page that lists all your articles in a paginated manner."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"tagWriter"},{"type":"text","text":" writes an array of items to multiple files, based on a tag. If you tag your articles you can use this to render tag pages like "},{"type":"codeVoice","code":"deploy\/articles\/iOS\/index.html"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"yearWriter"},{"type":"text","text":" is similar to "},{"type":"codeVoice","code":"tagWriter"},{"type":"text","text":" but uses the publication date of the item. You can use this to create year-based archives of your articles, for example "},{"type":"codeVoice","code":"deploy\/articles\/2022\/index.html"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, please check out "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Saga\/documentation\/Saga\/Writer"},{"type":"text","text":"."}]},{"anchor":"Extending-Saga","level":2,"type":"heading","text":"Extending Saga"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s very easy to add your own step to Saga where you can access the items and run your own code:"}]},{"type":"codeListing","syntax":"swift","code":["extension Saga {","  @discardableResult","  func createArticleImages() -> Self {","    let articles = fileStorage.compactMap { $0.item as? Item<ArticleMetadata> }","","    for article in articles {","      let destination = (self.outputPath + article.relativeDestination.parent()).string + \".png\"","      \/\/ generate an image and write it to `destination`","    }","","    return self","  }","}","","try await Saga(input: \"content\", output: \"deploy\")"," \/\/ ...register and run steps..."," .createArticleImages()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But probably more common and useful is to use the "},{"type":"codeVoice","code":"itemProcessor"},{"type":"text","text":" parameter of the readers:"}]},{"type":"codeListing","syntax":"swift","code":["func addExclamationToTitle(item: Item<EmptyMetadata>) async {","  \/\/ Do whatever you want with the Item - you can even use async functions and await them!","  item.title.append(\"!\")","}","","@main","struct Run {","  static func main() async throws {","    try await Saga(input: \"content\", output: \"deploy\")","      .register(","        metadata: EmptyMetadata.self,","        readers: [.parsleyMarkdownReader(itemProcessor: addExclamationToTitle)],","        writers: [.itemWriter(swim(renderItem))]","      )","  }","}"]},{"type":"aside","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can check the "},{"overridingTitleInlineContent":[{"type":"text","text":"source of loopwerk.io"}],"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/loopwerk\/loopwerk.io","overridingTitle":"source of loopwerk.io"},{"type":"text","text":", which uses a custom item processors and a custom processing step, for more inspiration."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s also easy to add your own readers and renderers; search for "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/topics\/saga-plugin"},{"type":"text","text":" on Github. For example, "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/loopwerk\/SagaInkMarkdownReader"},{"type":"text","text":" adds an "},{"type":"codeVoice","code":".inkMarkdownReader"},{"type":"text","text":" that uses Ink and Splash."}]},{"anchor":"Development-server","level":2,"type":"heading","text":"Development server"},{"type":"paragraph","inlineContent":[{"type":"text","text":"From your website folder you can run the following command to start a development server, which rebuilds your website on changes, and reloads the browser as well."}]},{"type":"codeListing","syntax":null,"code":["swift run watch [input-folders, separated by a space] [output-folder]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the same relative input- and output folders as you gave to Saga. Example: "},{"type":"codeVoice","code":"swift run watch content Sources deploy"},{"type":"text","text":" to rebuild whenever you change your content or your Swift code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This functionality does depend on a globally installed "},{"type":"reference","isActive":true,"identifier":"https:\/\/browsersync.io"},{"type":"text","text":", and only works on macOS, not Linux."}]},{"type":"codeListing","syntax":null,"code":["npm install -g browser-sync"]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/saga\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Saga\/documentation\/Saga\/GettingStarted","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An overview of how to configure Saga to render your pages and articles."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Getting Started with Saga","role":"article","modules":[{"name":"Saga"}]},"hierarchy":{"paths":[["doc:\/\/Saga\/documentation\/Saga"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/Saga\/documentation\/Saga\/Installation","doc:\/\/Saga\/documentation\/Saga\/Architecture","doc:\/\/Saga\/documentation\/Saga\/Reader","doc:\/\/Saga\/documentation\/Saga\/Writer"],"generated":true}],"references":{"doc://Saga/documentation/Saga/Writer":{"role":"symbol","title":"Writer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Writer"}],"abstract":[{"type":"text","text":"Writers turn an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Saga\/documentation\/Saga\/Item"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" using a “renderer”, and write the resulting "},{"type":"codeVoice","code":"String"},{"type":"text","text":" to a file on disk."}],"identifier":"doc:\/\/Saga\/documentation\/Saga\/Writer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Writer"}],"url":"\/documentation\/saga\/writer"},"doc://Saga/documentation/Saga":{"role":"collection","title":"Saga","abstract":[{"type":"text","text":"A static site generator, written in Swift, allowing you to supply your own metadata types for your items."}],"identifier":"doc:\/\/Saga\/documentation\/Saga","kind":"symbol","type":"topic","url":"\/documentation\/saga"},"https://github.com/loopwerk/SagaStencilRenderer":{"title":"SagaStencilRenderer","titleInlineContent":[{"type":"text","text":"SagaStencilRenderer"}],"type":"link","identifier":"https:\/\/github.com\/loopwerk\/SagaStencilRenderer","url":"https:\/\/github.com\/loopwerk\/SagaStencilRenderer"},"https://github.com/loopwerk/SagaSwimRenderer":{"title":"SagaSwimRenderer","titleInlineContent":[{"type":"text","text":"SagaSwimRenderer"}],"type":"link","identifier":"https:\/\/github.com\/loopwerk\/SagaSwimRenderer","url":"https:\/\/github.com\/loopwerk\/SagaSwimRenderer"},"https://github.com/robb/Swim":{"title":"Swim","titleInlineContent":[{"type":"text","text":"Swim"}],"type":"link","identifier":"https:\/\/github.com\/robb\/Swim","url":"https:\/\/github.com\/robb\/Swim"},"https://browsersync.io":{"title":"browser-sync","titleInlineContent":[{"type":"text","text":"browser-sync"}],"type":"link","identifier":"https:\/\/browsersync.io","url":"https:\/\/browsersync.io"},"https://github.com/loopwerk/SagaInkMarkdownReader":{"title":"SagaInkMarkdownReader","titleInlineContent":[{"type":"text","text":"SagaInkMarkdownReader"}],"type":"link","identifier":"https:\/\/github.com\/loopwerk\/SagaInkMarkdownReader","url":"https:\/\/github.com\/loopwerk\/SagaInkMarkdownReader"},"https://github.com/loopwerk/Saga/blob/main/Example":{"title":"Example project","titleInlineContent":[{"type":"text","text":"Example project"}],"type":"link","identifier":"https:\/\/github.com\/loopwerk\/Saga\/blob\/main\/Example","url":"https:\/\/github.com\/loopwerk\/Saga\/blob\/main\/Example"},"doc://Saga/documentation/Saga/Item":{"role":"symbol","title":"Item","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Item"}],"abstract":[{"type":"text","text":"A model reprenting an item."}],"identifier":"doc:\/\/Saga\/documentation\/Saga\/Item","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Item"}],"url":"\/documentation\/saga\/item"},"doc://Saga/documentation/Saga/Architecture":{"role":"article","title":"Architecture","abstract":[{"type":"text","text":"An overview of how Saga works."}],"identifier":"doc:\/\/Saga\/documentation\/Saga\/Architecture","kind":"article","type":"topic","url":"\/documentation\/saga\/architecture"},"https://github.com/topics/saga-plugin":{"title":"saga-plugin","titleInlineContent":[{"type":"text","text":"saga-plugin"}],"type":"link","identifier":"https:\/\/github.com\/topics\/saga-plugin","url":"https:\/\/github.com\/topics\/saga-plugin"},"https://github.com/loopwerk/loopwerk.io":{"title":"source of loopwerk.io","titleInlineContent":[{"type":"text","text":"source of loopwerk.io"}],"type":"link","identifier":"https:\/\/github.com\/loopwerk\/loopwerk.io","url":"https:\/\/github.com\/loopwerk\/loopwerk.io"},"doc://Saga/documentation/Saga/Reader":{"role":"symbol","title":"Reader","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reader"}],"abstract":[{"type":"text","text":"Readers are responsible for turning text files into "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Saga\/documentation\/Saga\/Item"},{"type":"text","text":" instances."}],"identifier":"doc:\/\/Saga\/documentation\/Saga\/Reader","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reader"}],"url":"\/documentation\/saga\/reader"},"doc://Saga/documentation/Saga/Installation":{"role":"article","title":"Installation","abstract":[{"type":"text","text":"How to set up your project with the right dependencies."}],"identifier":"doc:\/\/Saga\/documentation\/Saga\/Installation","kind":"article","type":"topic","url":"\/documentation\/saga\/installation"}}}